import type { UserInput, SocialPost, DesignDetails } from '../types';
import { PLATFORM_DIMENSIONS } from '../constants';

// Stability AI API configuration
const STABILITY_API_KEY = "sk-P8RcGHrlPUmLGtQce6UMazltNHJwGbFRgevXPcdLJ5tZsaNN"; // Replace with your actual API key
const STABILITY_API_URL = "https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/text-to-image";

// Convert platform dimensions to Stability AI format
const getStabilityDimensions = (platform: string) => {
  const dimensions = PLATFORM_DIMENSIONS[platform as keyof typeof PLATFORM_DIMENSIONS];
  if (!dimensions) return { width: 1024, height: 1024 };
  
  // Convert aspect ratio to specific dimensions
  const aspectRatio = dimensions.aspectRatio;
  if (aspectRatio === "1:1") return { width: 1024, height: 1024 };
  if (aspectRatio === "16:9") return { width: 1024, height: 576 };
  if (aspectRatio === "4:5") return { width: 1024, height: 1280 };
  if (aspectRatio === "9:16") return { width: 576, height: 1024 };
  
  return { width: 1024, height: 1024 };
};

// Convert file to base64 for Stability AI
const fileToBase64 = async (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onloadend = () => {
      const result = reader.result as string;
      const base64 = result.split(',')[1];
      resolve(base64);
    };
    reader.onerror = reject;
    reader.readAsDataURL(file);
  });
};

// Generate image using Stability AI
const generatePostImage = async (input: UserInput): Promise<string> => {
  const { productDescription, style, brandColors, font, productImage, logoImage, logoPosition, platform } = input;
  const { aspectRatio, name } = PLATFORM_DIMENSIONS[platform];
  const aspectRatioName = name.split(' ')[0];
  const { width, height } = getStabilityDimensions(platform);

  // Build the prompt for Stability AI
  let prompt = `A professional social media post for ${aspectRatioName} platform (${aspectRatio} aspect ratio). `;
  
  // Add product description
  prompt += `Product: ${productDescription}. `;
  
  // Add style instructions
  prompt += `Style: ${style}. `;
  
  // Add brand colors if provided
  if (brandColors) {
    prompt += `Brand colors: primary ${brandColors.primary}, secondary ${brandColors.secondary}. `;
  }
  
  // Add font mood
  if (font) {
    prompt += `Design mood: ${font}. `;
  }

  // Add specific style instructions
  const styleInstructions = {
    'Photorealistic': 'Ultra-realistic, high-resolution, professional photography, sharp details, natural lighting',
    'Cinematic': 'Cinematic lighting, dramatic shadows, film-like quality, professional cinematography',
    '90s Retro': '90s aesthetic, retro colors, vintage film grain, nostalgic atmosphere',
    'Minimalist & Clean': 'Minimalist design, clean lines, lots of white space, simple composition',
    'Luxury & Elegant': 'Luxury aesthetic, elegant materials, sophisticated lighting, premium feel'
  };

  prompt += styleInstructions[style as keyof typeof styleInstructions] || 'Professional, high-quality design. ';
  
  // Add platform-specific instructions
  prompt += `Optimized for ${aspectRatioName} social media platform. `;
  
  // Add logo placement if specified
  if (logoImage && logoPosition) {
    const positionDescription = {
      'top-left': 'top-left corner',
      'top-right': 'top-right corner',
      'top-middle': 'top center'
    }[logoPosition];
    prompt += `Space reserved for logo placement in ${positionDescription}. `;
  }

  // Add quality and technical specifications
  prompt += `High resolution, professional quality, no text overlays, clean composition, perfect for social media marketing.`;

  try {
    const response = await fetch(STABILITY_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${STABILITY_API_KEY}`,
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        text_prompts: [
          {
            text: prompt,
            weight: 1
          }
        ],
        cfg_scale: 7,
        height: height,
        width: width,
        samples: 1,
        steps: 30,
        style_preset: 'photographic'
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`Stability AI API error: ${errorData.message || response.statusText}`);
    }

    const data = await response.json();
    
    if (!data.artifacts || data.artifacts.length === 0) {
      throw new Error('No image generated by Stability AI');
    }

    // Return the base64 image
    const base64Image = data.artifacts[0].base64;
    return `data:image/png;base64,${base64Image}`;

  } catch (error) {
    console.error('Stability AI generation error:', error);
    throw new Error(`Failed to generate image with Stability AI: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};

// Generate text and design using a simple approach (since Stability AI is image-only)
const generateTextAndDesign = async (input: UserInput): Promise<{ headline: string; caption: string; hashtags: string[]; design: DesignDetails }> => {
  const { productDescription, style, brandColors, font, headlineText } = input;

  // Simple text generation logic (you could integrate with another AI service for text)
  const headlines = [
    `Discover ${productDescription}`,
    `Experience ${productDescription}`,
    `Transform with ${productDescription}`,
    `Elevate your style with ${productDescription}`,
    `Unleash ${productDescription}`
  ];

  const captions = [
    `Experience the perfect blend of quality and style. ${productDescription} brings innovation to your daily routine.`,
    `Discover what makes ${productDescription} the perfect choice for modern living. Quality meets design.`,
    `Transform your space with ${productDescription}. Where functionality meets elegance.`,
    `Elevate your experience with ${productDescription}. Designed for those who demand excellence.`,
    `Unleash the power of ${productDescription}. Innovation that makes a difference.`
  ];

  const hashtagSets = [
    ['#innovation', '#quality', '#design', '#lifestyle', '#premium', '#modern', '#style'],
    ['#excellence', '#premium', '#innovation', '#design', '#quality', '#lifestyle', '#modern'],
    ['#transformation', '#elegance', '#innovation', '#quality', '#design', '#premium', '#style'],
    ['#elevation', '#excellence', '#innovation', '#design', '#quality', '#premium', '#modern'],
    ['#unleash', '#power', '#innovation', '#design', '#quality', '#premium', '#transformation']
  ];

  const randomIndex = Math.floor(Math.random() * headlines.length);

  // Determine text color based on style
  const getTextColor = (style: string) => {
    if (style.includes('Minimalist') || style.includes('Clean')) return '#000000';
    if (style.includes('Luxury') || style.includes('Elegant')) return '#FFFFFF';
    if (style.includes('90s')) return '#FF6B6B';
    return '#FFFFFF'; // Default to white for most styles
  };

  // Determine font family based on style
  const getFontFamily = (style: string, userFont?: string) => {
    if (userFont) {
      if (userFont.includes('serif')) return 'font-serif';
      if (userFont.includes('mono')) return 'font-mono';
      return 'font-sans';
    }
    
    if (style.includes('Luxury') || style.includes('Elegant')) return 'font-serif';
    if (style.includes('Minimalist') || style.includes('Clean')) return 'font-sans';
    if (style.includes('90s')) return 'font-mono';
    return 'font-sans';
  };

  return {
    headline: headlineText || headlines[randomIndex],
    caption: captions[randomIndex],
    hashtags: hashtagSets[randomIndex],
    design: {
      textColor: getTextColor(style),
      fontFamily: getFontFamily(style, font),
      textAlign: 'text-center',
      justifyContent: 'justify-center',
      alignItems: 'items-center'
    }
  };
};

// Main function to generate social post using Stability AI
export const generateSocialPost = async (input: UserInput): Promise<SocialPost> => {
  try {
    console.log('Generating social post with Stability AI...');
    
    const postImagePromise = generatePostImage(input);
    const textAndDesignPromise = generateTextAndDesign(input);

    const [postImageUrl, { headline, caption, hashtags, design }] = await Promise.all([
      postImagePromise,
      textAndDesignPromise,
    ]);

    console.log('Stability AI generation completed successfully');

    return {
      postImageUrl,
      headline,
      caption,
      hashtags,
      design,
    };
  } catch (error) {
    console.error("Error in Stability AI generateSocialPost:", error);
    if (error instanceof Error) {
      throw new Error(`Failed to generate social post with Stability AI: ${error.message}`);
    }
    throw new Error("An unknown error occurred while generating the social post with Stability AI.");
  }
};

// Test function to verify API key
export const testStabilityConnection = async (): Promise<boolean> => {
  try {
    const response = await fetch('https://api.stability.ai/v1/user/account', {
      headers: {
        'Authorization': `Bearer ${STABILITY_API_KEY}`,
        'Accept': 'application/json'
      }
    });
    return response.ok;
  } catch (error) {
    console.error('Stability AI connection test failed:', error);
    return false;
  }
};
